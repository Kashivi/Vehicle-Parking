{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'ReleaseSpot',\n  data() {\n    return {\n      lot_id: this.$route.query.lot_id || '',\n      spot_id: this.$route.query.spot_id || '',\n      user_id: '',\n      releaseResult: null,\n      showDetails: false\n    };\n  },\n  created() {\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n    this.user_id = user.user_id;\n  },\n  mounted() {\n    this.releaseSpot(); // Automatically call release on mount\n  },\n  methods: {\n    async releaseSpot() {\n      const token = localStorage.getItem('auth_token');\n      try {\n        const res = await fetch('http://localhost:5000/api/release-spot', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `${token}`\n          },\n          body: JSON.stringify({\n            lot_id: this.lot_id,\n            spot_id: this.spot_id,\n            user_id: this.user_id\n          })\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.releaseResult = data;\n          this.showDetails = true;\n        } else {\n          alert('❌ Release failed: ' + data.message);\n          this.$router.push('/user-dashboard');\n        }\n      } catch (error) {\n        console.error('Fetch error:', error);\n        alert('⚠️ Server error while releasing spot.');\n        this.$router.push('/user-dashboard');\n      }\n    },\n    formatDateTime(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    },\n    goToDashboard() {\n      this.$router.push({\n        path: '/user-dashboard',\n        query: {\n          refresh: 'true'\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","lot_id","$route","query","spot_id","user_id","releaseResult","showDetails","created","user","JSON","parse","localStorage","getItem","mounted","releaseSpot","methods","token","res","fetch","method","headers","body","stringify","json","ok","alert","message","$router","push","error","console","formatDateTime","timestamp","date","Date","toLocaleString","goToDashboard","path","refresh"],"sources":["C:\\Users\\DELL\\OneDrive\\Desktop\\vehicle_parking_app_23f3004276\\frontend\\src\\views\\ReleaseSpot.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-4\">\r\n    <h2>Release Parking Spot</h2>\r\n\r\n    <!-- Form to confirm release -->\r\n    <form @submit.prevent=\"submitRelease\" v-if=\"!showDetails\">\r\n      <div class=\"mb-3\">\r\n        <label for=\"lot_id\" class=\"form-label\">Lot ID</label>\r\n        <input type=\"text\" id=\"lot_id\" v-model=\"lot_id\" class=\"form-control\" readonly />\r\n      </div>\r\n\r\n      <div class=\"mb-3\">\r\n        <label for=\"spot_id\" class=\"form-label\">Spot ID</label>\r\n        <input type=\"text\" id=\"spot_id\" v-model=\"spot_id\" class=\"form-control\" readonly />\r\n      </div>\r\n\r\n      <div class=\"mb-3\">\r\n        <label for=\"user_id\" class=\"form-label\">User ID</label>\r\n        <input type=\"text\" id=\"user_id\" v-model=\"user_id\" class=\"form-control\" readonly />\r\n      </div>\r\n\r\n      <button type=\"submit\" class=\"btn btn-success\">Submit</button>\r\n      <button type=\"button\" class=\"btn btn-secondary ms-2\" @click=\"goToDashboard\">Cancel</button>\r\n    </form>\r\n\r\n    <!-- Table format for release summary -->\r\n    <div v-if=\"showDetails\" class=\"mt-4\">\r\n      <h4 class=\"mb-3\">Release Summary</h4>\r\n      <table class=\"table table-bordered table-striped\">\r\n        <tbody>\r\n          <tr>\r\n            <th>Lot ID</th>\r\n            <td>{{ releaseResult.lot_id }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Spot ID</th>\r\n            <td>{{ releaseResult.spot_id }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>User ID</th>\r\n            <td>{{ releaseResult.user_id }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Parking Time</th>\r\n            <td>{{ formatDateTime(releaseResult.parking_timestamp) }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Release Time</th>\r\n            <td>{{ formatDateTime(releaseResult.release_timestamp) }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Total Cost</th>\r\n            <td>₹{{ releaseResult.total_cost }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <button class=\"btn btn-primary mt-3\" @click=\"goToDashboard\">Go to Dashboard</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nexport default {\r\n  name: 'ReleaseSpot',\r\n  data() {\r\n    return {\r\n      lot_id: this.$route.query.lot_id || '',\r\n      spot_id: this.$route.query.spot_id || '',\r\n      user_id: '',\r\n      releaseResult: null,\r\n      showDetails: false\r\n    };\r\n  },\r\n  created() {\r\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\r\n    this.user_id = user.user_id;\r\n  },\r\n  mounted() {\r\n    this.releaseSpot();  // Automatically call release on mount\r\n  },\r\n  methods: {\r\n    async releaseSpot() {\r\n      const token = localStorage.getItem('auth_token');\r\n\r\n      try {\r\n        const res = await fetch('http://localhost:5000/api/release-spot', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `${token}`\r\n          },\r\n          body: JSON.stringify({\r\n            lot_id: this.lot_id,\r\n            spot_id: this.spot_id,\r\n            user_id: this.user_id\r\n          })\r\n        });\r\n\r\n        const data = await res.json();\r\n\r\n        if (res.ok) {\r\n          this.releaseResult = data;\r\n          this.showDetails = true;\r\n        } else {\r\n          alert('❌ Release failed: ' + data.message);\r\n          this.$router.push('/user-dashboard');\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Fetch error:', error);\r\n        alert('⚠️ Server error while releasing spot.');\r\n        this.$router.push('/user-dashboard');\r\n      }\r\n    },\r\n    formatDateTime(timestamp) {\r\n      const date = new Date(timestamp);\r\n      return date.toLocaleString();\r\n    },\r\n    goToDashboard() {\r\n      this.$router.push({ path: '/user-dashboard', query: { refresh: 'true' } });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.container {\r\n  max-width: 600px;\r\n}\r\n</style>"],"mappings":";AAgEA,eAAe;EACbA,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACF,MAAK,IAAK,EAAE;MACtCG,OAAO,EAAE,IAAI,CAACF,MAAM,CAACC,KAAK,CAACC,OAAM,IAAK,EAAE;MACxCC,OAAO,EAAE,EAAE;MACXC,aAAa,EAAE,IAAI;MACnBC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,MAAMC,IAAG,GAAIC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC;IAC7D,IAAI,CAACR,OAAM,GAAII,IAAI,CAACJ,OAAO;EAC7B,CAAC;EACDS,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC,EAAG;EACvB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,WAAWA,CAAA,EAAG;MAClB,MAAME,KAAI,GAAIL,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MAEhD,IAAI;QACF,MAAMK,GAAE,GAAI,MAAMC,KAAK,CAAC,wCAAwC,EAAE;UAChEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,GAAGJ,KAAK;UAC3B,CAAC;UACDK,IAAI,EAAEZ,IAAI,CAACa,SAAS,CAAC;YACnBtB,MAAM,EAAE,IAAI,CAACA,MAAM;YACnBG,OAAO,EAAE,IAAI,CAACA,OAAO;YACrBC,OAAO,EAAE,IAAI,CAACA;UAChB,CAAC;QACH,CAAC,CAAC;QAEF,MAAML,IAAG,GAAI,MAAMkB,GAAG,CAACM,IAAI,CAAC,CAAC;QAE7B,IAAIN,GAAG,CAACO,EAAE,EAAE;UACV,IAAI,CAACnB,aAAY,GAAIN,IAAI;UACzB,IAAI,CAACO,WAAU,GAAI,IAAI;QACzB,OAAO;UACLmB,KAAK,CAAC,oBAAmB,GAAI1B,IAAI,CAAC2B,OAAO,CAAC;UAC1C,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC;QACtC;MAEF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;QACpCJ,KAAK,CAAC,uCAAuC,CAAC;QAC9C,IAAI,CAACE,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC;MACtC;IACF,CAAC;IACDG,cAAcA,CAACC,SAAS,EAAE;MACxB,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,SAAS,CAAC;MAChC,OAAOC,IAAI,CAACE,cAAc,CAAC,CAAC;IAC9B,CAAC;IACDC,aAAaA,CAAA,EAAG;MACd,IAAI,CAACT,OAAO,CAACC,IAAI,CAAC;QAAES,IAAI,EAAE,iBAAiB;QAAEnC,KAAK,EAAE;UAAEoC,OAAO,EAAE;QAAO;MAAE,CAAC,CAAC;IAC5E;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}